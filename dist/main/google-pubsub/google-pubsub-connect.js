'use strict';

const fs = require('fs');

const waitOn = require('wait-on');

const {
  PubSub
} = require('@google-cloud/pubsub');

const startGooglePubSub = require('./start-google-pubsub');

const defaultPort = parseInt(fs.readFileSync(`${__dirname}/default-google-pubsub-test-port`));
const defaultContainerName = fs.readFileSync(`${__dirname}/default-google-pubsub-test-container`).toString('utf8').trim();
const DEFAULT_PROJECT = 'test-support-project';

async function googlePubsubConnect({
  port = defaultPort,
  projects = [DEFAULT_PROJECT]
} = {}) {
  const start = Date.now();

  if (!process.env.CI) {
    await startGooglePubSub({
      port,
      projects
    });
    await waitOn({
      resources: [`tcp:localhost:${port}`]
    });
    console.log(`started google-pubsub container in ${Date.now() - start} ms`);
  } else {
    console.log('skipped launching container');
  }

  process.env.PUBSUB_EMULATOR_HOST = process.env.PUBSUB_EMULATOR_HOST || `localhost:${port}`;
  return projects.reduce((accum, projectId) => {
    accum[projectId] = new PubSub({
      projectId
    });
    return accum;
  }, {});
}

googlePubsubConnect.defaultPort = defaultPort;
googlePubsubConnect.defaultContainerName = defaultContainerName;
googlePubsubConnect.defaultProject = DEFAULT_PROJECT;
module.exports = googlePubsubConnect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL2dvb2dsZS1wdWJzdWIvZ29vZ2xlLXB1YnN1Yi1jb25uZWN0LmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIndhaXRPbiIsIlB1YlN1YiIsInN0YXJ0R29vZ2xlUHViU3ViIiwiZGVmYXVsdFBvcnQiLCJwYXJzZUludCIsInJlYWRGaWxlU3luYyIsIl9fZGlybmFtZSIsImRlZmF1bHRDb250YWluZXJOYW1lIiwidG9TdHJpbmciLCJ0cmltIiwiREVGQVVMVF9QUk9KRUNUIiwiZ29vZ2xlUHVic3ViQ29ubmVjdCIsInBvcnQiLCJwcm9qZWN0cyIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInByb2Nlc3MiLCJlbnYiLCJDSSIsInJlc291cmNlcyIsImNvbnNvbGUiLCJsb2ciLCJQVUJTVUJfRU1VTEFUT1JfSE9TVCIsInJlZHVjZSIsImFjY3VtIiwicHJvamVjdElkIiwiZGVmYXVsdFByb2plY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBdEI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWFGLE9BQU8sQ0FBQyxzQkFBRCxDQUExQjs7QUFFQSxNQUFNRyxpQkFBaUIsR0FBR0gsT0FBTyxDQUFDLHVCQUFELENBQWpDOztBQUVBLE1BQU1JLFdBQVcsR0FBR0MsUUFBUSxDQUFDTixFQUFFLENBQUNPLFlBQUgsQ0FBaUIsR0FBRUMsU0FBVSxrQ0FBN0IsQ0FBRCxDQUE1QjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHVCxFQUFFLENBQUNPLFlBQUgsQ0FBaUIsR0FBRUMsU0FBVSx1Q0FBN0IsRUFBcUVFLFFBQXJFLENBQThFLE1BQTlFLEVBQXNGQyxJQUF0RixFQUE3QjtBQUVBLE1BQU1DLGVBQWUsR0FBRyxzQkFBeEI7O0FBQ0EsZUFBZUMsbUJBQWYsQ0FBb0M7QUFDbENDLEVBQUFBLElBQUksR0FBR1QsV0FEMkI7QUFFbENVLEVBQUFBLFFBQVEsR0FBRyxDQUFDSCxlQUFEO0FBRnVCLElBR2hDLEVBSEosRUFHUTtBQUNOLFFBQU1JLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQWQ7O0FBRUEsTUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsRUFBakIsRUFBcUI7QUFDbkIsVUFBTWpCLGlCQUFpQixDQUFDO0FBQUVVLE1BQUFBLElBQUY7QUFBUUMsTUFBQUE7QUFBUixLQUFELENBQXZCO0FBQ0EsVUFBTWIsTUFBTSxDQUFDO0FBQUVvQixNQUFBQSxTQUFTLEVBQUUsQ0FBRSxpQkFBZ0JSLElBQUssRUFBdkI7QUFBYixLQUFELENBQVo7QUFFQVMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsc0NBQXFDUCxJQUFJLENBQUNDLEdBQUwsS0FBYUYsS0FBTSxLQUFyRTtBQUNELEdBTEQsTUFLTztBQUNMTyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2QkFBWjtBQUNEOztBQUVETCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUssb0JBQVosR0FBbUNOLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxvQkFBWixJQUFxQyxhQUFZWCxJQUFLLEVBQXpGO0FBRUEsU0FBT0MsUUFBUSxDQUFDVyxNQUFULENBQWdCLENBQUNDLEtBQUQsRUFBUUMsU0FBUixLQUFzQjtBQUMzQ0QsSUFBQUEsS0FBSyxDQUFDQyxTQUFELENBQUwsR0FBbUIsSUFBSXpCLE1BQUosQ0FBVztBQUFFeUIsTUFBQUE7QUFBRixLQUFYLENBQW5CO0FBQ0EsV0FBT0QsS0FBUDtBQUNELEdBSE0sRUFHSixFQUhJLENBQVA7QUFJRDs7QUFFRGQsbUJBQW1CLENBQUNSLFdBQXBCLEdBQWtDQSxXQUFsQztBQUNBUSxtQkFBbUIsQ0FBQ0osb0JBQXBCLEdBQTJDQSxvQkFBM0M7QUFDQUksbUJBQW1CLENBQUNnQixjQUFwQixHQUFxQ2pCLGVBQXJDO0FBRUFrQixNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixtQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCB3YWl0T24gPSByZXF1aXJlKCd3YWl0LW9uJylcbmNvbnN0IHsgUHViU3ViIH0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL3B1YnN1YicpXG5cbmNvbnN0IHN0YXJ0R29vZ2xlUHViU3ViID0gcmVxdWlyZSgnLi9zdGFydC1nb29nbGUtcHVic3ViJylcblxuY29uc3QgZGVmYXVsdFBvcnQgPSBwYXJzZUludChmcy5yZWFkRmlsZVN5bmMoYCR7X19kaXJuYW1lfS9kZWZhdWx0LWdvb2dsZS1wdWJzdWItdGVzdC1wb3J0YCkpXG5jb25zdCBkZWZhdWx0Q29udGFpbmVyTmFtZSA9IGZzLnJlYWRGaWxlU3luYyhgJHtfX2Rpcm5hbWV9L2RlZmF1bHQtZ29vZ2xlLXB1YnN1Yi10ZXN0LWNvbnRhaW5lcmApLnRvU3RyaW5nKCd1dGY4JykudHJpbSgpXG5cbmNvbnN0IERFRkFVTFRfUFJPSkVDVCA9ICd0ZXN0LXN1cHBvcnQtcHJvamVjdCdcbmFzeW5jIGZ1bmN0aW9uIGdvb2dsZVB1YnN1YkNvbm5lY3QgKHtcbiAgcG9ydCA9IGRlZmF1bHRQb3J0LFxuICBwcm9qZWN0cyA9IFtERUZBVUxUX1BST0pFQ1RdXG59ID0ge30pIHtcbiAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpXG5cbiAgaWYgKCFwcm9jZXNzLmVudi5DSSkge1xuICAgIGF3YWl0IHN0YXJ0R29vZ2xlUHViU3ViKHsgcG9ydCwgcHJvamVjdHMgfSlcbiAgICBhd2FpdCB3YWl0T24oeyByZXNvdXJjZXM6IFtgdGNwOmxvY2FsaG9zdDoke3BvcnR9YF0gfSlcblxuICAgIGNvbnNvbGUubG9nKGBzdGFydGVkIGdvb2dsZS1wdWJzdWIgY29udGFpbmVyIGluICR7RGF0ZS5ub3coKSAtIHN0YXJ0fSBtc2ApXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ3NraXBwZWQgbGF1bmNoaW5nIGNvbnRhaW5lcicpXG4gIH1cblxuICBwcm9jZXNzLmVudi5QVUJTVUJfRU1VTEFUT1JfSE9TVCA9IHByb2Nlc3MuZW52LlBVQlNVQl9FTVVMQVRPUl9IT1NUIHx8IGBsb2NhbGhvc3Q6JHtwb3J0fWBcblxuICByZXR1cm4gcHJvamVjdHMucmVkdWNlKChhY2N1bSwgcHJvamVjdElkKSA9PiB7XG4gICAgYWNjdW1bcHJvamVjdElkXSA9IG5ldyBQdWJTdWIoeyBwcm9qZWN0SWQgfSlcbiAgICByZXR1cm4gYWNjdW1cbiAgfSwge30pXG59XG5cbmdvb2dsZVB1YnN1YkNvbm5lY3QuZGVmYXVsdFBvcnQgPSBkZWZhdWx0UG9ydFxuZ29vZ2xlUHVic3ViQ29ubmVjdC5kZWZhdWx0Q29udGFpbmVyTmFtZSA9IGRlZmF1bHRDb250YWluZXJOYW1lXG5nb29nbGVQdWJzdWJDb25uZWN0LmRlZmF1bHRQcm9qZWN0ID0gREVGQVVMVF9QUk9KRUNUXG5cbm1vZHVsZS5leHBvcnRzID0gZ29vZ2xlUHVic3ViQ29ubmVjdFxuIl19