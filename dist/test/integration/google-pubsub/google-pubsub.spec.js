/* global describe, it */
'use strict';

const Promise = require('bluebird');

const uuid = require('uuid').v4;

const chai = require('chai');

chai.use(require('dirty-chai'));
const expect = chai.expect;

const googlePubSubConnect = require('../../../main');

describe('integration tests of google-pubsub', function () {
  describe('google-pubsub-connect', function () {
    it('should work', async function () {
      // eslint-disable-next-line no-async-promise-executor
      return new Promise(async (resolve, reject) => {
        if (process.env.CI) {
          // don't run this in CI pipeline
          console.log('skipping because in CI pipeline');
          return resolve();
        }

        this.timeout(60000);
        let subscription;
        let topic;

        const cleanup = async () => {
          try {
            if (topic) await topic.delete();
          } catch (e) {
            console.warn(`failed to delete topic ${topic.name}`);
          }

          try {
            if (subscription) await subscription.delete();
          } catch (e) {
            console.warn(`failed to delete subscription ${subscription.name}`);
          }
        };

        try {
          const pubsubs = await googlePubSubConnect();
          const project = googlePubSubConnect.defaultProject;
          const pubsub = pubsubs[project];
          expect(pubsub).to.be.ok();
          topic = (await pubsub.createTopic(`x${uuid()}`))[0];
          const data = {
            id: uuid()
          };
          const buffer = Buffer.from(JSON.stringify(data));
          subscription = (await pubsub.createSubscription(topic, `x${uuid()}`))[0];

          const handleMessage = async msg => {
            try {
              msg.ack();
              const msgData = JSON.parse(Buffer.from(msg.data, 'base64').toString('utf8'));
              expect(msgData).to.deep.equal(data);
              resolve();
            } catch (e) {
              reject(e);
            } finally {
              await cleanup();
            }
          };

          subscription.on('message', handleMessage);
          const id = await topic.publish(buffer);
          expect(id).to.be.ok();
        } catch (e) {
          return (await cleanup()) || reject(e);
        }
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXN0L2ludGVncmF0aW9uL2dvb2dsZS1wdWJzdWIvZ29vZ2xlLXB1YnN1Yi5zcGVjLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwidXVpZCIsInY0IiwiY2hhaSIsInVzZSIsImV4cGVjdCIsImdvb2dsZVB1YlN1YkNvbm5lY3QiLCJkZXNjcmliZSIsIml0IiwicmVzb2x2ZSIsInJlamVjdCIsInByb2Nlc3MiLCJlbnYiLCJDSSIsImNvbnNvbGUiLCJsb2ciLCJ0aW1lb3V0Iiwic3Vic2NyaXB0aW9uIiwidG9waWMiLCJjbGVhbnVwIiwiZGVsZXRlIiwiZSIsIndhcm4iLCJuYW1lIiwicHVic3VicyIsInByb2plY3QiLCJkZWZhdWx0UHJvamVjdCIsInB1YnN1YiIsInRvIiwiYmUiLCJvayIsImNyZWF0ZVRvcGljIiwiZGF0YSIsImlkIiwiYnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJoYW5kbGVNZXNzYWdlIiwibXNnIiwiYWNrIiwibXNnRGF0YSIsInBhcnNlIiwidG9TdHJpbmciLCJkZWVwIiwiZXF1YWwiLCJvbiIsInB1Ymxpc2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JFLEVBQTdCOztBQUNBLE1BQU1DLElBQUksR0FBR0gsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0FHLElBQUksQ0FBQ0MsR0FBTCxDQUFTSixPQUFPLENBQUMsWUFBRCxDQUFoQjtBQUNBLE1BQU1LLE1BQU0sR0FBR0YsSUFBSSxDQUFDRSxNQUFwQjs7QUFFQSxNQUFNQyxtQkFBbUIsR0FBR04sT0FBTyxDQUFDLGVBQUQsQ0FBbkM7O0FBRUFPLFFBQVEsQ0FBQyxvQ0FBRCxFQUF1QyxZQUFZO0FBQ3pEQSxFQUFBQSxRQUFRLENBQUMsdUJBQUQsRUFBMEIsWUFBWTtBQUM1Q0MsSUFBQUEsRUFBRSxDQUFDLGFBQUQsRUFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0EsYUFBTyxJQUFJVCxPQUFKLENBQVksT0FBT1UsT0FBUCxFQUFnQkMsTUFBaEIsS0FBMkI7QUFDNUMsWUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEVBQWhCLEVBQW9CO0FBQUU7QUFDcEJDLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlDQUFaO0FBQ0EsaUJBQU9OLE9BQU8sRUFBZDtBQUNEOztBQUNELGFBQUtPLE9BQUwsQ0FBYSxLQUFiO0FBRUEsWUFBSUMsWUFBSjtBQUNBLFlBQUlDLEtBQUo7O0FBRUEsY0FBTUMsT0FBTyxHQUFHLFlBQVk7QUFDMUIsY0FBSTtBQUNGLGdCQUFJRCxLQUFKLEVBQVcsTUFBTUEsS0FBSyxDQUFDRSxNQUFOLEVBQU47QUFDWixXQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1ZQLFlBQUFBLE9BQU8sQ0FBQ1EsSUFBUixDQUFjLDBCQUF5QkosS0FBSyxDQUFDSyxJQUFLLEVBQWxEO0FBQ0Q7O0FBRUQsY0FBSTtBQUNGLGdCQUFJTixZQUFKLEVBQWtCLE1BQU1BLFlBQVksQ0FBQ0csTUFBYixFQUFOO0FBQ25CLFdBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDVlAsWUFBQUEsT0FBTyxDQUFDUSxJQUFSLENBQWMsaUNBQWdDTCxZQUFZLENBQUNNLElBQUssRUFBaEU7QUFDRDtBQUNGLFNBWkQ7O0FBY0EsWUFBSTtBQUNGLGdCQUFNQyxPQUFPLEdBQUcsTUFBTWxCLG1CQUFtQixFQUF6QztBQUNBLGdCQUFNbUIsT0FBTyxHQUFHbkIsbUJBQW1CLENBQUNvQixjQUFwQztBQUNBLGdCQUFNQyxNQUFNLEdBQUdILE9BQU8sQ0FBQ0MsT0FBRCxDQUF0QjtBQUNBcEIsVUFBQUEsTUFBTSxDQUFDc0IsTUFBRCxDQUFOLENBQWVDLEVBQWYsQ0FBa0JDLEVBQWxCLENBQXFCQyxFQUFyQjtBQUVBWixVQUFBQSxLQUFLLEdBQUcsQ0FBQyxNQUFNUyxNQUFNLENBQUNJLFdBQVAsQ0FBb0IsSUFBRzlCLElBQUksRUFBRyxFQUE5QixDQUFQLEVBQXlDLENBQXpDLENBQVI7QUFDQSxnQkFBTStCLElBQUksR0FBRztBQUFFQyxZQUFBQSxFQUFFLEVBQUVoQyxJQUFJO0FBQVYsV0FBYjtBQUNBLGdCQUFNaUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUMsSUFBSSxDQUFDQyxTQUFMLENBQWVOLElBQWYsQ0FBWixDQUFmO0FBRUFmLFVBQUFBLFlBQVksR0FBRyxDQUFDLE1BQU1VLE1BQU0sQ0FBQ1ksa0JBQVAsQ0FBMEJyQixLQUExQixFQUFrQyxJQUFHakIsSUFBSSxFQUFHLEVBQTVDLENBQVAsRUFBdUQsQ0FBdkQsQ0FBZjs7QUFDQSxnQkFBTXVDLGFBQWEsR0FBRyxNQUFNQyxHQUFOLElBQWE7QUFDakMsZ0JBQUk7QUFDRkEsY0FBQUEsR0FBRyxDQUFDQyxHQUFKO0FBRUEsb0JBQU1DLE9BQU8sR0FBR04sSUFBSSxDQUFDTyxLQUFMLENBQVdULE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSyxHQUFHLENBQUNULElBQWhCLEVBQXNCLFFBQXRCLEVBQWdDYSxRQUFoQyxDQUF5QyxNQUF6QyxDQUFYLENBQWhCO0FBQ0F4QyxjQUFBQSxNQUFNLENBQUNzQyxPQUFELENBQU4sQ0FBZ0JmLEVBQWhCLENBQW1Ca0IsSUFBbkIsQ0FBd0JDLEtBQXhCLENBQThCZixJQUE5QjtBQUVBdkIsY0FBQUEsT0FBTztBQUNSLGFBUEQsQ0FPRSxPQUFPWSxDQUFQLEVBQVU7QUFDVlgsY0FBQUEsTUFBTSxDQUFDVyxDQUFELENBQU47QUFDRCxhQVRELFNBU1U7QUFDUixvQkFBTUYsT0FBTyxFQUFiO0FBQ0Q7QUFDRixXQWJEOztBQWVBRixVQUFBQSxZQUFZLENBQUMrQixFQUFiLENBQWdCLFNBQWhCLEVBQTJCUixhQUEzQjtBQUVBLGdCQUFNUCxFQUFFLEdBQUcsTUFBTWYsS0FBSyxDQUFDK0IsT0FBTixDQUFjZixNQUFkLENBQWpCO0FBQ0E3QixVQUFBQSxNQUFNLENBQUM0QixFQUFELENBQU4sQ0FBV0wsRUFBWCxDQUFjQyxFQUFkLENBQWlCQyxFQUFqQjtBQUNELFNBOUJELENBOEJFLE9BQU9ULENBQVAsRUFBVTtBQUNWLGlCQUFPLENBQUMsTUFBTUYsT0FBTyxFQUFkLEtBQXFCVCxNQUFNLENBQUNXLENBQUQsQ0FBbEM7QUFDRDtBQUNGLE9BekRNLENBQVA7QUEwREQsS0E1REMsQ0FBRjtBQTZERCxHQTlETyxDQUFSO0FBK0RELENBaEVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgZGVzY3JpYmUsIGl0ICovXG4ndXNlIHN0cmljdCdcblxuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJylcbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJykudjRcbmNvbnN0IGNoYWkgPSByZXF1aXJlKCdjaGFpJylcbmNoYWkudXNlKHJlcXVpcmUoJ2RpcnR5LWNoYWknKSlcbmNvbnN0IGV4cGVjdCA9IGNoYWkuZXhwZWN0XG5cbmNvbnN0IGdvb2dsZVB1YlN1YkNvbm5lY3QgPSByZXF1aXJlKCcuLi8uLi8uLi9tYWluJylcblxuZGVzY3JpYmUoJ2ludGVncmF0aW9uIHRlc3RzIG9mIGdvb2dsZS1wdWJzdWInLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdnb29nbGUtcHVic3ViLWNvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCB3b3JrJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFzeW5jLXByb21pc2UtZXhlY3V0b3JcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5DSSkgeyAvLyBkb24ndCBydW4gdGhpcyBpbiBDSSBwaXBlbGluZVxuICAgICAgICAgIGNvbnNvbGUubG9nKCdza2lwcGluZyBiZWNhdXNlIGluIENJIHBpcGVsaW5lJylcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aW1lb3V0KDYwMDAwKVxuXG4gICAgICAgIGxldCBzdWJzY3JpcHRpb25cbiAgICAgICAgbGV0IHRvcGljXG5cbiAgICAgICAgY29uc3QgY2xlYW51cCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRvcGljKSBhd2FpdCB0b3BpYy5kZWxldGUoKVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgZmFpbGVkIHRvIGRlbGV0ZSB0b3BpYyAke3RvcGljLm5hbWV9YClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikgYXdhaXQgc3Vic2NyaXB0aW9uLmRlbGV0ZSgpXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBmYWlsZWQgdG8gZGVsZXRlIHN1YnNjcmlwdGlvbiAke3N1YnNjcmlwdGlvbi5uYW1lfWApXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBwdWJzdWJzID0gYXdhaXQgZ29vZ2xlUHViU3ViQ29ubmVjdCgpXG4gICAgICAgICAgY29uc3QgcHJvamVjdCA9IGdvb2dsZVB1YlN1YkNvbm5lY3QuZGVmYXVsdFByb2plY3RcbiAgICAgICAgICBjb25zdCBwdWJzdWIgPSBwdWJzdWJzW3Byb2plY3RdXG4gICAgICAgICAgZXhwZWN0KHB1YnN1YikudG8uYmUub2soKVxuXG4gICAgICAgICAgdG9waWMgPSAoYXdhaXQgcHVic3ViLmNyZWF0ZVRvcGljKGB4JHt1dWlkKCl9YCkpWzBdXG4gICAgICAgICAgY29uc3QgZGF0YSA9IHsgaWQ6IHV1aWQoKSB9XG4gICAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG5cbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSAoYXdhaXQgcHVic3ViLmNyZWF0ZVN1YnNjcmlwdGlvbih0b3BpYywgYHgke3V1aWQoKX1gKSlbMF1cbiAgICAgICAgICBjb25zdCBoYW5kbGVNZXNzYWdlID0gYXN5bmMgbXNnID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG1zZy5hY2soKVxuXG4gICAgICAgICAgICAgIGNvbnN0IG1zZ0RhdGEgPSBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKG1zZy5kYXRhLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKSlcbiAgICAgICAgICAgICAgZXhwZWN0KG1zZ0RhdGEpLnRvLmRlZXAuZXF1YWwoZGF0YSlcblxuICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBhd2FpdCBjbGVhbnVwKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdWJzY3JpcHRpb24ub24oJ21lc3NhZ2UnLCBoYW5kbGVNZXNzYWdlKVxuXG4gICAgICAgICAgY29uc3QgaWQgPSBhd2FpdCB0b3BpYy5wdWJsaXNoKGJ1ZmZlcilcbiAgICAgICAgICBleHBlY3QoaWQpLnRvLmJlLm9rKClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiAoYXdhaXQgY2xlYW51cCgpKSB8fCByZWplY3QoZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==